# -*- coding: utf-8 -*-
"""Object Detection of Liver Infection using Large Yolo model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iLzreLIfnbqIq3aULk07m-wh1oY3h4JS

To access the Google Drive

<a href="https://colab.research.google.com/github/sourangshupal/Yolov5_Custom_Training/blob/main/Roboflow_Custom_YOLOv5.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>
"""

from google.colab import drive
def accessGoogleDrive(parameter = None):
  if parameter == 'active':
    drive.mount('/content/drive')
  else:
    raise Exception('Try again')

##### Call the function from the current directory #####
if __name__ == "__main__":
  try:
    accessGoogleDrive('active')
  except Exception as e:
    print(e.with_traceback)
  else:
    print('Run successfully.'.capitalize())

##### Print the current directory #####
print('The current directory is given below.\n')
!pwd

"""To UNZIP the dataset 
1. First we should be change the directory.
2. Then run the unzip function.
"""

# Commented out IPython magic to ensure Python compatibility.
##### this is the directory where my images are in Zip format #####
# %cd /content/drive/MyDrive/LiverDiseaseYolov5
##### Unzip it #####
!unzip dataset.zip

"""#Install Dependencies

_(Remember to choose GPU in Runtime if not already selected. Runtime --> Change Runtime Type --> Hardware accelerator --> GPU)_
"""

# Commented out IPython magic to ensure Python compatibility.
##### clone YOLOv5 repository #####
!git clone https://github.com/ultralytics/yolov5
# %cd yolov5

print('Clone this repository successfuly.'.capitalize(),'\n')

##### install dependencies as necessary - install dependencies (ignore errors)#####
!pip install -r requirements.txt

"""Move the train, test, and data yaml to the new folder named 'dataset'"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/LiverDiseaseYolov5

# Commented out IPython magic to ensure Python compatibility.
# %mkdir dataset

# Commented out IPython magic to ensure Python compatibility.
# %mv train dataset

# Commented out IPython magic to ensure Python compatibility.
# %mv test dataset

# Commented out IPython magic to ensure Python compatibility.
# %mv data.yaml dataset

"""Check the data yaml changed or not """

# Commented out IPython magic to ensure Python compatibility.
##### this is the YAML file #####
# %cat /content/drive/MyDrive/LiverDiseaseYolov5/dataset/data.yaml

'''
Should be changed the directory of train and test
'''

# Commented out IPython magic to ensure Python compatibility.
##### this is the YAML file #####
# %cat /content/drive/MyDrive/LiverDiseaseYolov5/dataset/data.yaml

"""# Define Model Configuration and Architecture

We will write a yaml script that defines the parameters for our model like the number of classes, anchors, and each layer.

You do not need to edit these cells, but you may.
"""

##### define number of classes based on YAML #####
import yaml
try:
  with open("/content/drive/MyDrive/LiverDiseaseYolov5/dataset/data.yaml", 'r') as stream:
      num_classes = str(yaml.safe_load(stream)['nc'])
except Exception as e:
  print(e.with_traceback)
else:
  print('Done with successfully.\n'.capitalize())

"""Choose the model of Yolo version 5
1. Initially I choose the large version
2. This model in the models folders of the 'yolo5' folder.
"""

# Commented out IPython magic to ensure Python compatibility.
##### this is the model configuration we will use for our tutorial #####
# %cat /content/drive/MyDrive/LiverDiseaseYolov5/yolov5/models/yolov5l.yaml

##### customize iPython writefile so we can write variables #####
from IPython.core.magic import register_line_cell_magic

@register_line_cell_magic
def writetemplate(line, cell):
    with open(line, 'w') as f:
        f.write(cell.format(**globals()))

"""Create the custom model for further

*Create custom model name `custom_yolo5l` in the models folder 

*the take all the parameters from the previous cell
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writetemplate /content/drive/MyDrive/LiverDiseaseYolov5/yolov5/models/custom_yolov5m.yaml
# 
# # parameters
# nc: {num_classes}  # number of classes
# depth_multiple: 1.0  # model depth multiple
# width_multiple: 1.0  # layer channel multiple
# anchors:
#   - [10,13, 16,30, 33,23]  # P3/8
#   - [30,61, 62,45, 59,119]  # P4/16
#   - [116,90, 156,198, 373,326]  # P5/32
# 
# # YOLOv5 v6.0 backbone
# backbone:
#   # [from, number, module, args]
#   [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2
#    [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
#    [-1, 3, C3, [128]],
#    [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
#    [-1, 6, C3, [256]],
#    [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
#    [-1, 9, C3, [512]],
#    [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
#    [-1, 3, C3, [1024]],
#    [-1, 1, SPPF, [1024, 5]],  # 9
#   ]
# 
# # YOLOv5 v6.0 head
# head:
#   [[-1, 1, Conv, [512, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 6], 1, Concat, [1]],  # cat backbone P4
#    [-1, 3, C3, [512, False]],  # 13
# 
#    [-1, 1, Conv, [256, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 4], 1, Concat, [1]],  # cat backbone P3
#    [-1, 3, C3, [256, False]],  # 17 (P3/8-small)
# 
#    [-1, 1, Conv, [256, 3, 2]],
#    [[-1, 14], 1, Concat, [1]],  # cat head P4
#    [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)
# 
#    [-1, 1, Conv, [512, 3, 2]],
#    [[-1, 10], 1, Concat, [1]],  # cat head P5
#    [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)
# 
#    [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
#   ]

"""# Train Custom YOLOv5 Detector

### Next, we'll fire off training!


Here, we are able to pass a number of arguments:
- **img:** define input image size
- **batch:** determine batch size
- **epochs:** define the number of training epochs. (Note: often, 3000+ are common here!)
- **data:** set the path to our yaml file
- **cfg:** specify our model configuration
- **weights:** specify a custom path to weights. (Note: you can download weights from the Ultralytics Google Drive [folder](https://drive.google.com/open?id=1Drs_Aiu7xx6S-ix95f9kNsA6ueKRpN2J))
- **name:** result names
- **nosave:** only save the final checkpoint
- **cache:** cache images for faster training
"""

##### Check again whether data yaml is converted or not #####
!cat /content/drive/MyDrive/LiverDiseaseYolov5/dataset/data.yaml

"""To train the model 
1. Epochs    = 100
2. Batch size = 32
3. Image size = 416

To do that
1. Go to yolo5 folders 
"""

# Commented out IPython magic to ensure Python compatibility.
# # train yolov5s on custom data for 100 epochs
# # time its performance
# %%time
# ##### For call the train model changed the directory ####
# %cd /content/drive/MyDrive/LiverDiseaseYolov5/yolov5
# ##### Make initialization for data yaml #####
# dataYaml = '/content/drive/MyDrive/LiverDiseaseYolov5/dataset/data.yaml'
# ##### Make initialization for custom yolo5 that I created ####
# custom  = '/content/drive/MyDrive/LiverDiseaseYolov5/yolov5/models/custom_yolov5m.yaml'
# 
# ##### Call the train function with the parameters #####
# !python train.py --img 416 --batch 16 --epochs 100 --data '/content/drive/MyDrive/LiverDiseaseYolov5/dataset/data.yaml'\
#  --cfg '/content/drive/MyDrive/LiverDiseaseYolov5/yolov5/models/custom_yolov5m.yaml' --weights '' --name yolov5l_results

"""# Evaluate Custom YOLOv5 Detector Performance"""

# Commented out IPython magic to ensure Python compatibility.
##### Start tensorboard #####
##### Launch after you have started training #####
##### logs save in the folder "runs" #####
# %load_ext tensorboard
# %tensorboard --logdir runs

"""Ignore Warnings"""

import warnings
warnings.filterwarnings("ignore")

"""## We can also output some older school graphs if the tensor board isn't working for whatever reason

the output is in here: Results saved to runs/train/yolov5l_results
"""

##### plot results.txt as results.png #####
import torch
from IPython.display import Image
from utils.plots import plot_results  # plot results.txt as results.png
Image(filename = '/content/drive/MyDrive/LiverDiseaseYolov5/yolov5/runs/train/yolov5l_results/results.png', \
      width = 1000)  # view results.png

"""Check the performance"""

##### print out an augmented training example #####
print("GROUND TRUTH AUGMENTED TRAINING DATA:\n\n")
Image(filename = \
      '/content/drive/MyDrive/LiverDiseaseYolov5/yolov5/runs/train/yolov5l_results/val_batch0_labels.jpg',\
      width = 800)

##### print out an augmented training example #####
print("GROUND TRUTH AUGMENTED TRAINING DATA:\n\n")
Image(filename = \
      '/content/drive/MyDrive/LiverDiseaseYolov5/yolov5/runs/train/yolov5l_results/val_batch0_pred.jpg',\
      width = 800)

"""#Run Inference  With Trained Weights
Run inference with a pretrained checkpoint on contents of `test/images` folder downloaded from Roboflow.
"""

# Commented out IPython magic to ensure Python compatibility.
# trained weights are saved by default in our weights folder
# %ls runs/

# Commented out IPython magic to ensure Python compatibility.
# %ls /content/drive/MyDrive/LiverDiseaseYolov5/yolov5/runs/train/yolov5l_results/weights

"""### Predict the model for the unknown dataset

1. Here, We can pass either IMAGE or VIDEO based on our problem descriptions.

`--source /content/drive/MyDrive/yolov5setup/dataset/test/images` this is responsible for image and videos.
"""

# Commented out IPython magic to ensure Python compatibility.
# when we ran this, we saw .007 second inference time. That is 140 FPS on a TESLA P100!
# use the best weights!
# %cd /content/drive/MyDrive/LiverDiseaseYolov5/yolov5
!python detect.py --weights runs/train/yolov5l_results/weights/best.pt\
 --img 416 --conf 0.4 --source /content/drive/MyDrive/LiverDiseaseYolov5/dataset/test/images

#display inference on ALL test images
#this looks much better with longer training above

import glob
from IPython.display import Image, display

for imageName in glob.glob('/content/drive/MyDrive/LiverDiseaseYolov5/yolov5/runs/detect/exp2/102_1_3_61_jpg.rf.39ea4cf296518310e4501dfaf587af62.jpg'): #assuming JPG
    display(Image(filename=imageName))
    print("\n")

"""#### For Single Image predict 

1. all the weights have been placed in the `best.pt`. 

This is in this direction: 

**yolo5 ->runs->train->yolo_results->weights->best.pt**

Then use it with the `image` that we want to predict
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/LiverDiseaseYolov5/yolov5
!python detect.py --weights runs/train/yolov5l_results/weights/best.pt\
 --img 416 --conf 0.4 --source /content/15_239_101_64_47_jpg.rf.c23cc3f6ba46896ce9c2cf3ee242bbaf.jpg

##### display inference on ALL test images #####
##### this looks much better with longer training above #####

'''
Results saved to runs/detect/exp3
'''

import glob
from IPython.display import Image, display

for imageName in glob.glob('/content/drive/MyDrive/LiverDiseaseYolov5/\
                            yolov5/runs/detect/exp3/15_239_101_64_47_jpg.\
                            rf.c23cc3f6ba46896ce9c2cf3ee242bbaf.jpg'): #assuming JPG
    display(Image(filename = imageName))
    print("\n")

"""# Export Trained Weights for Future Inference

Now that you have trained your custom detector, you can export the trained weights you have made here for inference on your device elsewhere
"""

from google.colab import drive
drive.mount('/content/gdrive')

# Commented out IPython magic to ensure Python compatibility.
# %cp /content/yolov5/runs/train/yolov5s_results/weights/best.pt /content/gdrive/My\ Drive