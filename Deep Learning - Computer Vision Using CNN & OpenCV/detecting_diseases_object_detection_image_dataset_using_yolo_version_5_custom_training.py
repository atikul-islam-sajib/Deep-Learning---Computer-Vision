# -*- coding: utf-8 -*-
"""Detecting diseases - Object Detection Image Dataset using Yolo Version 5 Custom Training.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tC4NQslQJ4Dj_jRjzNZPb5QHaP8y3ZoN

To access the Google Drive
"""

##### Import thr drive liabries #####
from google.colab import drive
def accessGoogleDrive(parameter = None):
  if parameter == 'active':
    drive.mount('/content/drive')
  else:
    raise Exception('Try again')

##### Call this 'accessGoogleDrive' function from this current directory #####
if __name__ == "__main__":
  try:
    accessGoogleDrive('active')
  except Exception as e:
    print(e.with_traceback)
  else:
    print('Drive access successfully.'.capitalize())

"""To Unzip the dataset"""

# Commented out IPython magic to ensure Python compatibility.
##### Go to the Yolov5setup directory and unzip the dataset #####
# %cd /content/drive/MyDrive/Yolov5setup/
!unzip dataset.zip

"""#Install Dependencies

_(Remember to choose GPU in Runtime if not already selected. Runtime --> Change Runtime Type --> Hardware accelerator --> GPU)_
"""

# Commented out IPython magic to ensure Python compatibility.
##### clone YOLOv5 repository #####
!git clone https://github.com/ultralytics/yolov5  # clone repo
# %cd yolov5

##### install dependencies as necessary #####
!pip install -qr requirements.txt  
##### install dependencies (ignore errors) #####

"""##### Check the data yaml works or not #####"""

# Commented out IPython magic to ensure Python compatibility.
try:
  # this is the YAML file
#   %cat /content/drive/MyDrive/Yolov5setup/dataset/data.yaml
except Exception as e:
  print(e.with_traceback)

"""# Define Model Configuration and Architecture

We will write a yaml script that defines the parameters for our model like the number of classes, anchors, and each layer.

You do not need to edit these cells, but you may.
"""

# define number of classes based on YAML
import yaml
with open("/content/drive/MyDrive/Yolov5setup/dataset/data.yaml", 'r') as stream:
    num_classes = str(yaml.safe_load(stream)['nc'])

# Commented out IPython magic to ensure Python compatibility.
#this is the model configuration we will use for our tutorial 
# %cat /content/drive/MyDrive/Yolov5setup/yolov5/models/yolov5m.yaml

#customize iPython writefile so we can write variables
from IPython.core.magic import register_line_cell_magic

@register_line_cell_magic
def writetemplate(line, cell):
    with open(line, 'w') as f:
        f.write(cell.format(**globals()))

# Commented out IPython magic to ensure Python compatibility.
# ##### Create custom_yolo5m.yml in the directory of models #####
# %%writetemplate /content/drive/MyDrive/Yolov5setup/yolov5/models/custom_yolov5m.yaml
# 
# ##### parameters #####
# nc: {num_classes}  # number of classes
# depth_multiple: 0.67  # model depth multiple
# width_multiple: 0.75  # layer channel multiple
# 
# ##### anchors #####
# anchors:
#   - [10,13, 16,30, 33,23]  # P3/8
#   - [30,61, 62,45, 59,119]  # P4/16
#   - [116,90, 156,198, 373,326]  # P5/32
# 
# ##### YOLOv5 backbone #####
# backbone:
#   # [from, number, module, args]
#   [[-1, 1, Focus, [64, 3]],  # 0-P1/2
#    [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
#    [-1, 3, C3, [128]],
#    [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
#    [-1, 9, C3, [256]],
#    [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
#    [-1, 9, C3, [512]],
#    [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
#    [-1, 1, SPP, [1024, [5, 9, 13]]],
#    [-1, 3, C3, [1024, False]],  # 9
#   ]
# 
# ##### YOLOv5 head #####
# head:
#   [[-1, 1, Conv, [512, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 6], 1, Concat, [1]],  # cat backbone P4
#    [-1, 3, C3, [512, False]],  # 13
# 
#    [-1, 1, Conv, [256, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 4], 1, Concat, [1]],  # cat backbone P3
#    [-1, 3, C3, [256, False]],  # 17 (P3/8-small)
# 
#    [-1, 1, Conv, [256, 3, 2]],
#    [[-1, 14], 1, Concat, [1]],  # cat head P4
#    [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)
# 
#    [-1, 1, Conv, [512, 3, 2]],
#    [[-1, 10], 1, Concat, [1]],  # cat head P5
#    [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)
# 
#    [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
#   ]

"""# Train Custom YOLOv5 Detector

### Next, we'll fire off training!


Here, we are able to pass a number of arguments:
- **img:** define input image size
- **batch:** determine batch size
- **epochs:** define the number of training epochs. (Note: often, 3000+ are common here!)
- **data:** set the path to our yaml file
- **cfg:** specify our model configuration
- **weights:** specify a custom path to weights. (Note: you can download weights from the Ultralytics Google Drive [folder](https://drive.google.com/open?id=1Drs_Aiu7xx6S-ix95f9kNsA6ueKRpN2J))
- **name:** result names
- **nosave:** only save the final checkpoint
- **cache:** cache images for faster training
"""

##### Check data.yml works or not #####
!cat /content/drive/MyDrive/Yolov5setup/dataset/data.yaml

"""Training the model """

# Commented out IPython magic to ensure Python compatibility.
# ##### train yolov5s on custom data for 100 epochs #####
# ##### time its performance #####
# %%time
# %cd /content/drive/MyDrive/yolov5setup/yolov5
# !python train.py --img 416 --batch 16 --epochs 100 --data '/content/drive/MyDrive/Yolov5setup/dataset/data.yaml'\
#  --cfg /content/drive/MyDrive/Yolov5setup/yolov5/models/custom_yolov5m.yaml\
#   --weights '' --name yolov5m_results

"""Evaluate Custom YOLOv5 Detector Performance:"""

# Commented out IPython magic to ensure Python compatibility.
# Start tensorboard
# Launch after you have started training
# logs save in the folder "runs"
# %load_ext tensorboard
# %tensorboard --logdir runs

# we can also output some older school graphs if the tensor board isn't working for whatever reason... 
import torch
from IPython.display import Image
from utils.plots import plot_results  # plot results.txt as results.png
Image(filename='/content/drive/MyDrive/yolov5setup/yolov5/runs/train/yolov5m_results2/results.png', width = 1000)  # view results.png

# we can also output some older school graphs if the tensor board isn't working for whatever reason... 
from utils.plots import plot_results  # plot results.txt as results.png
Image(filename='/content/drive/MyDrive/yolov5setup/yolov5/runs/train/yolov5m_results2/val_batch2_labels.jpg', width=1000)  # view results.png

"""#Run Inference  With Trained Weights
Run inference with a pretrained checkpoint on contents of `test/images` folder downloaded from Roboflow.
"""

# Commented out IPython magic to ensure Python compatibility.
# trained weights are saved by default in our weights folder
# %ls runs/

# Commented out IPython magic to ensure Python compatibility.
try:
#   %ls /content/drive/MyDrive/yolov5setup/yolov5/runs/train/yolov5m_results2/weights
except Exception as e:
  print(e.with_traceback)

# Commented out IPython magic to ensure Python compatibility.
# when we ran this, we saw .007 second inference time. That is 140 FPS on a TESLA P100!
# use the best weights!
# %cd /content/drive/MyDrive/yolov5setup/yolov5
!python detect.py --weights runs/train/yolov5m_results2/weights/best.pt\
 --img 416 --conf 0.4 --source /content/drive/MyDrive/Yolov5setup/dataset/test/images

import os
image_list = []
for image in os.listdir('/content/drive/MyDrive/Yolov5setup/dataset/train/images')[0: 2]:
  image_list.append('/content/drive/MyDrive/Yolov5setup/dataset/train/images/'+image)

for image in image_list:
  cv2_imshow(cv2.resize(cv2.imread(image), (150, 150)))

#display inference on ALL test images
#this looks much better with longer training above

import glob
from IPython.display import Image, display
import matplotlib.pyplot as plt
import cv2
from google.colab.patches import cv2_imshow
list_ = [
    '/content/drive/MyDrive/yolov5setup/yolov5/runs/detect/exp10/5673859a-ec42-4fc0-80ec-44cc3203c7be___Crnl_L-Mold-8768_JPG_jpg.rf.0ddedb23352724d7c771d854c1459181.jpg',
    '/content/drive/MyDrive/yolov5setup/yolov5/runs/detect/exp10/angular_leafspot321_jpg.\
    rf.263469caeb839db6cd49b91625867b2d.jpg',
    '/content/drive/MyDrive/yolov5setup/yolov5/runs/detect/exp10/angular_leafspot302_jpg.\
    rf.f595d59733d2bae373be3c8abb75f1c5.jpg'

]
##### Show the images #####
for image in list_:
  for imageName in glob.glob(image): #assuming JPG
      display(Image(filename=imageName))
      print(end = " ")